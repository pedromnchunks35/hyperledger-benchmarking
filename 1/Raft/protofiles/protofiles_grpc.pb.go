// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.23.4
// source: protofiles.proto

package protofiles

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// RaftSimpleClient is the client API for RaftSimple service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RaftSimpleClient interface {
	RequestVoteRPC(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteConfirmation, error)
	AppendLogsRPC(ctx context.Context, in *AppendRequest, opts ...grpc.CallOption) (*AppendLogsConfirmation, error)
	HearthBeatRPC(ctx context.Context, in *HearthBeatRequest, opts ...grpc.CallOption) (*HearthBeatConfirmation, error)
}

type raftSimpleClient struct {
	cc grpc.ClientConnInterface
}

func NewRaftSimpleClient(cc grpc.ClientConnInterface) RaftSimpleClient {
	return &raftSimpleClient{cc}
}

func (c *raftSimpleClient) RequestVoteRPC(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteConfirmation, error) {
	out := new(VoteConfirmation)
	err := c.cc.Invoke(ctx, "/protofiles.RaftSimple/RequestVoteRPC", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *raftSimpleClient) AppendLogsRPC(ctx context.Context, in *AppendRequest, opts ...grpc.CallOption) (*AppendLogsConfirmation, error) {
	out := new(AppendLogsConfirmation)
	err := c.cc.Invoke(ctx, "/protofiles.RaftSimple/AppendLogsRPC", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *raftSimpleClient) HearthBeatRPC(ctx context.Context, in *HearthBeatRequest, opts ...grpc.CallOption) (*HearthBeatConfirmation, error) {
	out := new(HearthBeatConfirmation)
	err := c.cc.Invoke(ctx, "/protofiles.RaftSimple/HearthBeatRPC", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RaftSimpleServer is the server API for RaftSimple service.
// All implementations must embed UnimplementedRaftSimpleServer
// for forward compatibility
type RaftSimpleServer interface {
	RequestVoteRPC(context.Context, *VoteRequest) (*VoteConfirmation, error)
	AppendLogsRPC(context.Context, *AppendRequest) (*AppendLogsConfirmation, error)
	HearthBeatRPC(context.Context, *HearthBeatRequest) (*HearthBeatConfirmation, error)
	mustEmbedUnimplementedRaftSimpleServer()
}

// UnimplementedRaftSimpleServer must be embedded to have forward compatible implementations.
type UnimplementedRaftSimpleServer struct {
}

func (UnimplementedRaftSimpleServer) RequestVoteRPC(context.Context, *VoteRequest) (*VoteConfirmation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RequestVoteRPC not implemented")
}
func (UnimplementedRaftSimpleServer) AppendLogsRPC(context.Context, *AppendRequest) (*AppendLogsConfirmation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AppendLogsRPC not implemented")
}
func (UnimplementedRaftSimpleServer) HearthBeatRPC(context.Context, *HearthBeatRequest) (*HearthBeatConfirmation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HearthBeatRPC not implemented")
}
func (UnimplementedRaftSimpleServer) mustEmbedUnimplementedRaftSimpleServer() {}

// UnsafeRaftSimpleServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RaftSimpleServer will
// result in compilation errors.
type UnsafeRaftSimpleServer interface {
	mustEmbedUnimplementedRaftSimpleServer()
}

func RegisterRaftSimpleServer(s grpc.ServiceRegistrar, srv RaftSimpleServer) {
	s.RegisterService(&RaftSimple_ServiceDesc, srv)
}

func _RaftSimple_RequestVoteRPC_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RaftSimpleServer).RequestVoteRPC(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protofiles.RaftSimple/RequestVoteRPC",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RaftSimpleServer).RequestVoteRPC(ctx, req.(*VoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RaftSimple_AppendLogsRPC_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AppendRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RaftSimpleServer).AppendLogsRPC(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protofiles.RaftSimple/AppendLogsRPC",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RaftSimpleServer).AppendLogsRPC(ctx, req.(*AppendRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RaftSimple_HearthBeatRPC_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HearthBeatRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RaftSimpleServer).HearthBeatRPC(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protofiles.RaftSimple/HearthBeatRPC",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RaftSimpleServer).HearthBeatRPC(ctx, req.(*HearthBeatRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// RaftSimple_ServiceDesc is the grpc.ServiceDesc for RaftSimple service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RaftSimple_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "protofiles.RaftSimple",
	HandlerType: (*RaftSimpleServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RequestVoteRPC",
			Handler:    _RaftSimple_RequestVoteRPC_Handler,
		},
		{
			MethodName: "AppendLogsRPC",
			Handler:    _RaftSimple_AppendLogsRPC_Handler,
		},
		{
			MethodName: "HearthBeatRPC",
			Handler:    _RaftSimple_HearthBeatRPC_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "protofiles.proto",
}
